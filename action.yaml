name: Create Github Deployment
description: Creates a Github Deployment based on a named ref
inputs:
  ref:
    description: The ref to deploy. This can be a branch, tag, or SHA.
    required: true
    default: ${{ github.ref }}
  task:
    description: Specifies a task to execute
    required: false
    default: deploy
  auto_merge:
    description: Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch
    required: false
  required_contexts:
    description: >
      The status contexts to verify against commit status checks.
      Values: `true` (All), `false` (None), string
    required: false
  payload:
    description: JSON payload with extra information about the deployment
    required: false
  environment:
    description: Name for the target deployment environment
    required: false
    default: production
  description:
    description: Short description of the deployment.
    required: false
  transient_environment:
    description: Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future
    required: false
  production_environment:
    description: Specifies if the given environment is one that end-users directly interact with
    required: false
  token:
    description: Github Token
    required: true
    default: ${{ github.token }}
  repository:
    description: The repository to use
    required: false
    default: ${{ github.repository }}
outputs:
  id:
    description: Deployment ID created
    value: ${{ steps.create.outputs.id }}
  json:
    description: Deployment JSON
    value: ${{ steps.create.outputs.json }}
runs:
  using: composite
  steps:
  - shell: bash
    id: create
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GH_REPO: ${{ inputs.repository }}
      OPTS: |
        ref: ${{ toJSON(inputs.ref || null) }}
        task: ${{ toJSON(inputs.task || null) }}
        auto_merge: ${{ inputs.auto_merge }}
        payload: ${{ inputs.payload }}
        environment: ${{ toJSON(inputs.environment || null) }}
        transient_environment: ${{ inputs.transient_environment }}
        production_environment: ${{ inputs.production_environment }}
        description: ${{ toJSON(inputs.description || null) }}
        required_contexts: ${{ toJSON(inputs.required_contexts || null) }}
    run: |
      deployment=$(
        yq e -o json <<< $OPTS \
        | jq '
          .
          | .required_contexts |= (if . == "false" then "" else . end)
          | .required_contexts |= (if . == "true" then null else . end)
          | .required_contexts |= (select(. != null) | split("\n") | map(select(length > 0)))
          | del(.. | nulls)' \
        | gh api repos/$GH_REPO/deployments --input -
      )

      echo "id::$(jq -rc '.id' <<< $deployment)" >> $GITHUB_OUTPUT
      echo "json::$(jq -c '.' <<< $deployment)" >> $GITHUB_OUTPUT

  - shell: bash
    run: |
      echo "::group::Outputs"
      yq e -P <<< '${{ toJSON(steps.create.outputs) }}'
      echo "::endgroup::"
